# -------------------------
# ✅ Make Nginx + Certbot + Docker Compose fully self-healing and hands-free, even if certs don’t exist yet.
#    Production Safety
#    Prep for SSL in a fault-tolerant way
# -------------------------
# docker-compose.yml
services:
  sqlite-mcp-server:
    build:
      context: .
      dockerfile: Dockerfile.mcp
    ports:
      - "8080:8080"
    volumes:
      - ./data:/data
    environment:
      - DB_PATH=/data/test.db
    restart: unless-stopped

  # FastAPI app + Ollama bridge
  api-server:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8090:8090"
    environment:
      - OLLAMA_URL=${OLLAMA_URL}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped

  # NGINX (serves HTTPS once cert is in place)
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"     # HTTP → HTTPS redirect
      - "443:443"
    environment:
      - DOMAIN_URL=${DOMAIN_URL}
    volumes:
      - ./nginx/conf/default.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - sqlite-mcp-server
      - api-server
    profiles: ["production"]
    entrypoint: >
      sh -c '
        until [ -f /etc/letsencrypt/live/${DOMAIN_URL}/fullchain.pem ]; do
          echo "Waiting for SSL cert…";
          sleep 3;
        done;
        exec nginx -g "daemon off;";
      '

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    entrypoint: >
      sh -c "
        trap exit TERM;
        while :; do
          certbot renew --webroot -w /var/www/certbot;
          sleep 6h;
        done
      "
    profiles: ["production"]