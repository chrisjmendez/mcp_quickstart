# -------------------------
# ✅ Make Nginx + Certbot + Docker Compose fully self-healing and hands-free, even if certs don’t exist yet.
#    Production Safety
#    Prep for SSL in a fault-tolerant way
# -------------------------
version: '3.8'

services:
  # NGINX (bootstraps to serve HTTP for Certbot initially)
  nginx-bootstrap:
    image: nginx:latest
    container_name: nginx-bootstrap
    ports:
      - "80:80"
    volumes:
      - ./nginx/bootstrap.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/www:/var/www/certbot
    depends_on:
      - api-server
      - sqlite-mcp-server
    restart: unless-stopped

  # NGINX (serves full HTTPS after cert is issued)
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - api-server
      - sqlite-mcp-server
    restart: unless-stopped
    entrypoint: >
      sh -c '
        until [ -f /etc/letsencrypt/live/${DOMAIN_URL}/fullchain.pem ]; do
          echo "Waiting for SSL cert for ${DOMAIN_URL}...";
          sleep 3;
        done;
        echo "Certificate found, launching NGINX with HTTPS.";
        exec nginx -g "daemon off;";
      '

  # Claude MCP SQLite server
  sqlite-mcp-server:
    build:
      context: .
      dockerfile: Dockerfile.mcp
    ports:
      - "8080:8080"
    volumes:
      - ./data:/data
    environment:
      - DB_PATH=/data/test.db
    restart: unless-stopped

  # FastAPI app + Ollama bridge
  api-server:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8090:8090"
    environment:
      - OLLAMA_URL=${OLLAMA_URL}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped

  # Certbot handles auto-renewal (cron-style loop)
  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    entrypoint: >
      sh -c "
        trap exit TERM;
        while :; do
          echo 'Renewing cert...';
          certbot renew --webroot -w /var/www/certbot;
          sleep 6h;
        done
      "

volumes:
  certbot_data:
  nginx_logs:
  db_data:
  
